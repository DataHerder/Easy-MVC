<?php
/**
 * EasyMVC
 * A fast lightweight Model View Controller framework
 *
 * Copyright (C) 2012  Paul Carlton
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author      Paul Carlton
 * @category    Model View Controller Framework
 * @package     EasyMVC
 * @license     GNU license
 * @version     1.0
 * @link        my.public.repo
 * @since       File available since
 */

/**
 * !!!!!!! IMPORTANT !!!!!!!!!
 * !!                       !!
 * !! DO NOT EDIT THIS FILE !!
 * !! DO NOT EDIT THIS FILE !!
 * !! DO NOT EDIT THIS FILE !!
 * !!                       !!
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 * Do not edit this file - it is the base foundation
 * of constants that run the Library
 */

/**
 * Require MVC architecture
 *
 * config-app.php - configures the system
 * Bootstrap  - initializes the system
 */
require("config.php");
require("Library/Bootstrap.php");

// skeleton to the mvc bootstrap
class MyBootstrap extends \EasyMVC\Bootstrap{}

# setup the router and autoload bootstrap
$Bootstrap = new MyBootstrap;
try {
	# get the router
	$Router = new EasyMVC\Routers\Router($Bootstrap);
	# get the controller
	$Router->callController();

} catch (\EasyMVC\Routers\RouterException $RouterException) {
	# if there was an error in the router - send a message
	$Error = new \EasyMVC\Views\Errors\Error;
	$Error->printError($RouterException->getMessage());

} catch (\EasyMVC\Responses\Abstracts\ResponsesAbstract $Response) {

	// if a specific http response error code wants to be thrown instead of a 2xx status code
	if ($Response->hasError()) {
		throw new \Exception($Response->getErrorMessage());
	} else {
		$Response->loadView();
	}

	// 400 response codes
} catch (\Exception $Exception) {

}
