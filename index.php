<?php
/**
 * EasyMVC
 * A fast lightweight Model View Controller framework
 *
 * Copyright (C) 2012  Paul Carlton
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author      Paul Carlton
 * @category    Model View Controller Framework
 * @package     EasyMVC
 * @license     GNU license
 * @version     1.0
 * @link        my.public.repo
 * @since       File available since
 */

/**
 * !!!!!!! IMPORTANT !!!!!!!!!
 * !!                       !!
 * !! DO NOT EDIT THIS FILE !!
 * !! DO NOT EDIT THIS FILE !!
 * !! DO NOT EDIT THIS FILE !!
 * !!                       !!
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 * Do not edit this file - it is the base foundation
 * of the framework and constants that run the Library
 */

/**
 * Require MVC architecture
 *
 * config-app.php - configures the system
 * Bootstrap  - initializes the system
 */
require("config.php");
require("Library/EasyMVCBootstrap.php");
require("Application/bootstrap.php");

try {
	if (class_exists('Bootstrap')) {
		throw new \Exception(
			'No Bootstrap Exists!
			Please ensure you have the file: bootstrap.php in you applications folder.
			Please see documentation and the latest '
		);
	}
	// the bootstrap is defined by the user in applications folder
	// it must exist AS \Application\Bootstrap to be recognized
	$Bootstrap = new \Application\Bootstrap();
	# get the router
	$Router = new EasyMVC\Routers\Router($Bootstrap);
	# get the controller
	$Router->callController();

} catch (\EasyMVC\Routers\RouterException $RouterException) {
	# if there was an error in the router - send a message
	$Error = new \EasyMVC\Views\Errors\Error;
	$Error->printError($RouterException->getMessage());

} catch (\EasyMVC\Responses\HttpResponse $HttpResponse) {

	// if a specific http response error code wants to be thrown instead of a 2xx status code
	if ($HttpResponse->hasError()) {
		throw new \Exception($HttpResponse->getErrorMessage());
	} else {
		$HttpResponse->loadView();
	}


//////////////////////////////////////////
// 
// The Last Exception handle!
// 
/////////////////////////////////////////
} catch (\Exception $Exception) {

	// This exception MAY NOT have the autoloading functions setup so it's generic!
	// We will use a generic template and include a split, we will also check
	// for a user defined function that will take the exception and output what it
	// wants.  This function is known as: lastExceptionHandle();
	if (function_exists('lastExceptionHandle')) {
		lastExceptionHandle($Exception);
	} else {

		if (DEBUG) {
			$debug_string = '<pre>'.
			print_r($_GET, true).
			print_r($_POST, true).
			print_r($_REQUEST, true).
			print_r($_SESSION, true).
			print_r($_SERVER, true).
			print_r($_ENV, true).
			'</pre>';
		} else {
			$debug_string = '';
		}

		if (SHOW_HTML_ON_LAST_EXCEPTION) {
			print '
				<!DOCTYPE html>
				<html>
					<head>
						<title>EasyMVC Exception Error</title>
						<!-- 
							"easymvc" javascript and css gets rerouted to library media files
							EasyMVC css takes advantage of less and bootstrap.  For more see
							Lesscss.org and the bootstrap repo at: 
						-->
						<link href="easymvc/css/easy-mvc.css" /> 
					</head>
					<body>
						<div id="easy-mvc-enc">
							<h1>There was an error handling your request!</h1>
							<h2>The error shown: '.$Exception->getMessage().'</h2>'.'<h3>Stack Trace:</h3>'.dbg_array($Exception, true).
				$debug_string.
				''.'
						</div>
					</body>
				</html>
			';
		} else {
			die('An error occured: '.$Exception->getMessage() . '<br>'."\n\n".$debug_string);
		}
	}
}
